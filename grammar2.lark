start : (decl)+


decl : variabledecl | functiondecl | classdecl | interfacedecl
variabledecl : variable ";"
variable : type IDENT
type : "int" | "double" | "bool" | "string" | IDENT | type "[]"
functiondecl : type IDENT "("formals")" stmtblock | "void" IDENT "("formals")" stmtblock
formals : variable (","variable)* | 
classdecl : "class" IDENT ("extends" IDENT)? ("implements" IDENT (","IDENT)*)?  "{"(field)*"}" 
field : accessmode variabledecl | accessmode functiondecl
accessmode : "private" | "protected" | "public" |
interfacedecl : "interface" IDENT "{" prototype* "}"
prototype : type IDENT(formals)";" | "void" IDENT(formals)
stmtblock : "{" variabledecl* stmt* "}"
stmt : expr? ";" | ifstmt | whilestmt | forstmt | breakstmt | continuestmt | returnstmt | printstmt | stmtblock
ifstmt : "if" "(" expr ")" stmt ("else" stmt| )
whilestmt : "while" "(" expr ")" stmt
forstmt : "for" "(" expr? ";" expr ";" expr? ")" stmt
returnstmt : "return" (expr)? ";"
breakstmt : "break" ";"
continuestmt : "continue" ";"
printstmt : "print" "(" ((expr)|((expr",")*)) ")" ";"
expr : lvalue "=" expr | constant | lvalue | "this" | call | "(" expr ")" | expr "+" expr | expr "−" expr | expr "*" expr | expr "/" expr | expr "%" expr | "−" expr | expr "<" expr | expr "<=" expr | expr ">" expr | expr ">=" expr | expr "==" expr | expr "!="  expr | expr "&&" expr | expr "||" expr | "!"expr | "ReadInteger" "()" | "ReadLine()" | "new" IDENT  | "NewArray" "(" expr "," type ")" | "itod" "("expr")" | "dtoi" "("expr")" | "itob" "("expr")" |"btoi" "("expr")"
lvalue : IDENT | expr "." IDENT | expr "[" expr "]" 
call : IDENT "("actuals")" | expr "." IDENT "("actuals")"
actuals : ((expr)|((expr",")*)) | 
constant : (T_INT|T_HEX) | T_DOUBLELITERAL | ("true"|"false") | STRINGCONSTANT | "null"




DIGIT: /[0-9]+/
HEX_DIGITS :  /[0-9a-fA_F]/
T_HEX : (("0x"|"0X")HEX_DIGITS+)
T_INT : DIGIT+DIGIT*
T_DOUBLELITERAL :/(\d)+\.(\d)*((E|e)(\+|-)?(\d)+)?/
STRINGCONSTANT : "\"" /[a-zA-Z]+[a-zA-Z0-9]/  "\""
IDENT : CNAME
SL_COMMENT : "//"/[^\n]*/
ML_COMMENT : /\/\*[\s\S]*?\*\//

%import common.CNAME
%import common.ESCAPED_STRING -> T_STRINGLITERAL
%ignore /[\t  \f\n]+/
%ignore SL_COMMENT
%ignore ML_COMMENT

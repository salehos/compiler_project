?start:(DIGIT|VOID|INT|DOUBLE|BOOL|STRING|FOR|WHILE|BREAK|CONTINUE|T_HEX|T_INT|T_DOUBLELITERAL|T_TRUE_BOOLEAN|T_FALSE_BOOLEAN|T_STRINGLITERAL|CLASS|INTERFACE|NULL|THIS|EXTENDS
|IMPLEMENTS|PLUS|MINOS|MULTIPLIE|DIVIDE|REMINDER|IF|ELSE|RETURN|NEW|NEW_ARRAY|PRINT|READ_INTEGER|READ_LINE|DTOI|ITOD|BTOI|ITOB|PRIVATE|DOUBLEEQ
|PROTECTED|PUBLIC|ROUND_OPEN_BRACKET|ROUND_CLOSE_BRACKET|SQUARE_OPEN_BRACKET|SQUARE_CLOSE_BRACKET|CURLY_OPEN_BRACKET|CURLY_CLOSE_BRACKET|SEMC|LS|LSE|EQ|NEQ|GT|GTE|SEP|L_OR|L_AND|L_NOT|T_ID|SL_COMMENT|ML_COMMENT)*

DIGIT: /[0-9]+/
HEX_DIGITS : /[0-9a-fA_F]/
T_HEX : (("0x"|"0X")HEX_DIGITS+)
T_INT : DIGIT+DIGIT*
T_DOUBLELITERAL : DIGIT+"."+DIGIT*
T_TRUE_BOOLEAN : "true"
T_FALSE_BOOLEAN : "false"
VOID : "void"
INT : "int"
DOUBLE : "double" 
BOOL : "bool"
STRING : "string"
CLASS : "class"
INTERFACE : "interface"
NULL : "null"
THIS : "this"
EXTENDS : "extends"
IMPLEMENTS : "implements"
FOR : "for"
WHILE : "while"
BREAK : "break"
CONTINUE: "continue"
IF : "if"
ELSE : "else"
RETURN : "return"
NEW : "new"
NEW_ARRAY : "NewArray"
PRINT : "Print"
READ_INTEGER : "ReadInteger"
READ_LINE : "ReadLine"
DTOI: "dtoi"
ITOD: "itod"
BTOI: "btoi"
ITOB: "itob"
PRIVATE: "private"
PROTECTED: "protected"
PUBLIC: "public"
PLUS: "+"
MINOS: "-"
MULTIPLIE: "*"
DIVIDE: "/"
REMINDER : "%"
LS : "<"
LSE : "<="
EQ : "="
DOUBLEEQ : "=="
NEQ : "!="
GT : ">"
GTE : ">="
L_AND : "&&"
L_OR : "||"
L_NOT : "!"
SEMC: ";"
SEP:","
ROUND_OPEN_BRACKET: "("
ROUND_CLOSE_BRACKET: ")"
SQUARE_OPEN_BRACKET: "["
SQUARE_CLOSE_BRACKET: "]"
CURLY_OPEN_BRACKET: "{"
CURLY_CLOSE_BRACKET: "}"
T_ID : /[a-zA-Z_]\w*/
SL_COMMENT : "//"/[^\n]*/
ML_COMMENT : /\/\*[\s\S]*?\*\//

%import common.ESCAPED_STRING -> T_STRINGLITERAL
%ignore /[\t  \f\n]+/
%ignore SL_COMMENT
%ignore ML_COMMENT

